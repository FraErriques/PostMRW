Project title : TestConsole
Project path  : /home/fra/src/GitHubSandBox/PostMRW/TestConsole/

Frame function: 
Frame address : 0x7fffffffe4a0
--------------------------------------------------------------------------------
;41 :	{
0x555555558247	endbr64
0x55555555824b	push   rbp
0x55555555824c	mov    rbp,rsp
0x55555555824f	push   rbx
0x555555558250	sub    rsp,0x28
;42 :	    double delta = +3.7123;
0x555555558254	movsd  xmm0,QWORD PTR [rip+0xee84]        # 0x5555555670e0
0x55555555825c	movsd  QWORD PTR [rbp-0x28],xmm0
;43 :	    double stepSize = +2.0*PI/100.0;
0x555555558261	movsd  xmm0,QWORD PTR [rip+0xee7f]        # 0x5555555670e8
0x555555558269	movsd  QWORD PTR [rbp-0x20],xmm0
;44 :	    for(int c=0; c<100; c++)
0x55555555826e	mov    DWORD PTR [rbp-0x2c],0x0
0x555555558275	cmp    DWORD PTR [rbp-0x2c],0x63
0x555555558279	jg     0x555555558393 <main()+332>
0x55555555838a	add    DWORD PTR [rbp-0x2c],0x1
0x55555555838e	jmp    0x555555558275 <main()+46>
;45 :	    {
;46 :	        Numerics::Complex * res = originAnulus( stepSize, c, delta );
0x55555555827f	movsd  xmm0,QWORD PTR [rbp-0x28]
0x555555558284	mov    edx,DWORD PTR [rbp-0x2c]
0x555555558287	mov    rax,QWORD PTR [rbp-0x20]
0x55555555828b	movapd xmm1,xmm0
0x55555555828f	mov    edi,edx
0x555555558291	movq   xmm0,rax
0x555555558296	call   0x55555555814e <originAnulus(double, int, double)>
0x55555555829b	mov    QWORD PTR [rbp-0x18],rax
;47 :	        std::cout<<"originAnulus(stepSize,c,delta)=="<<stepSize<<c<<delta<<" == "<< res->Re()<<" +I* "<< res->Im()<<" length=="<< res->length() <<std::endl;
0x55555555829f	lea    rsi,[rip+0xedd2]        # 0x555555567078
0x5555555582a6	lea    rdi,[rip+0x16d93]        # 0x55555556f040 <std::cout@@GLIBCXX_3.4>
0x5555555582ad	call   0x555555557890 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
0x5555555582b2	mov    rdx,rax
0x5555555582b5	mov    rax,QWORD PTR [rbp-0x20]
0x5555555582b9	movq   xmm0,rax
0x5555555582be	mov    rdi,rdx
0x5555555582c1	call   0x555555557b40 <std::ostream::operator<<(double)@plt>
0x5555555582c6	mov    rdx,rax
0x5555555582c9	mov    eax,DWORD PTR [rbp-0x2c]
0x5555555582cc	mov    esi,eax
0x5555555582ce	mov    rdi,rdx
0x5555555582d1	call   0x555555557ac0 <std::ostream::operator<<(int)@plt>
0x5555555582d6	mov    rdx,rax
0x5555555582d9	mov    rax,QWORD PTR [rbp-0x28]
0x5555555582dd	movq   xmm0,rax
0x5555555582e2	mov    rdi,rdx
0x5555555582e5	call   0x555555557b40 <std::ostream::operator<<(double)@plt>
0x5555555582ea	lea    rsi,[rip+0xeda8]        # 0x555555567099
0x5555555582f1	mov    rdi,rax
0x5555555582f4	call   0x555555557890 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
0x5555555582f9	mov    rbx,rax
0x5555555582fc	mov    rax,QWORD PTR [rbp-0x18]
0x555555558300	mov    rdi,rax
0x555555558303	call   0x555555558464 <Numerics::Complex::Re() const>
0x555555558308	mov    rdi,rbx
0x55555555830b	call   0x555555557b40 <std::ostream::operator<<(double)@plt>
0x555555558310	lea    rsi,[rip+0xed87]        # 0x55555556709e
0x555555558317	mov    rdi,rax
0x55555555831a	call   0x555555557890 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
0x55555555831f	mov    rbx,rax
0x555555558322	mov    rax,QWORD PTR [rbp-0x18]
0x555555558326	mov    rdi,rax
0x555555558329	call   0x55555555847a <Numerics::Complex::Im() const>
0x55555555832e	mov    rdi,rbx
0x555555558331	call   0x555555557b40 <std::ostream::operator<<(double)@plt>
0x555555558336	lea    rsi,[rip+0xed67]        # 0x5555555670a4
0x55555555833d	mov    rdi,rax
0x555555558340	call   0x555555557890 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
0x555555558345	mov    rbx,rax
0x555555558348	mov    rax,QWORD PTR [rbp-0x18]
0x55555555834c	mov    rdi,rax
0x55555555834f	call   0x55555556474a <Numerics::Complex::length() const>
0x555555558354	mov    rdi,rbx
0x555555558357	call   0x555555557b40 <std::ostream::operator<<(double)@plt>
0x55555555835c	mov    rdx,rax
0x55555555835f	mov    rax,QWORD PTR [rip+0x16c52]        # 0x55555556efb8
0x555555558366	mov    rsi,rax
0x555555558369	mov    rdi,rdx
0x55555555836c	call   0x5555555578e0 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>
;48 :	        delete res;
0x555555558371	mov    rbx,QWORD PTR [rbp-0x18]
0x555555558375	test   rbx,rbx
0x555555558378	je     0x55555555838a <main()+323>
0x55555555837a	mov    rdi,rbx
0x55555555837d	call   0x555555558454 <Numerics::Complex::~Complex()>
0x555555558382	mov    rdi,rbx
0x555555558385	call   0x555555557870 <operator delete(void*)@plt>
;49 :	    }
;51 :	//    Numerics::Complex s(+0.5 , +13.7);
;52 :	//    Numerics::Complex *z = new Numerics::Complex(1, 3);
;53 :	//    Numerics::Complex icoChain( IcoChain( s, *z) );
;54 :	//    delete z;
;56 :	    //
;57 :	    std::cout<<"\n\n\n\t Strike Enter to leave\t";
0x555555558393	lea    rsi,[rip+0xed14]        # 0x5555555670ae
0x55555555839a	lea    rdi,[rip+0x16c9f]        # 0x55555556f040 <std::cout@@GLIBCXX_3.4>
0x5555555583a1	call   0x555555557890 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
;58 :	    getchar();
0x5555555583a6	call   0x5555555579d0 <getchar@plt>
;59 :	    return 0;
0x5555555583ab	mov    eax,0x0
;60 :	}// main
0x5555555583b0	add    rsp,0x28
0x5555555583b4	pop    rbx
0x5555555583b5	pop    rbp
0x5555555583b6	ret
